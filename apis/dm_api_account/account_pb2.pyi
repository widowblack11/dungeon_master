"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    int,
    str,
    type,
)
from collections.abc import (
    Iterable,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from google.protobuf.timestamp_pb2 import (
    Timestamp,
)
from google.protobuf.wrappers_pb2 import (
    BoolValue,
    Int32Value,
    StringValue,
)
from typing import (
    NewType,
)

DESCRIPTOR: FileDescriptor

class _UserRole:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _UserRoleEnumTypeWrapper(_EnumTypeWrapper[_UserRole.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    Guest: _UserRole.ValueType  # 0
    Player: _UserRole.ValueType  # 1
    Administrator: _UserRole.ValueType  # 2
    NannyModerator: _UserRole.ValueType  # 3
    RegularModerator: _UserRole.ValueType  # 4
    SeniorModerator: _UserRole.ValueType  # 5

class UserRole(_UserRole, metaclass=_UserRoleEnumTypeWrapper): ...

Guest: UserRole.ValueType  # 0
Player: UserRole.ValueType  # 1
Administrator: UserRole.ValueType  # 2
NannyModerator: UserRole.ValueType  # 3
RegularModerator: UserRole.ValueType  # 4
SeniorModerator: UserRole.ValueType  # 5

class _ColorSchema:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _ColorSchemaEnumTypeWrapper(_EnumTypeWrapper[_ColorSchema.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    Modern: _ColorSchema.ValueType  # 0
    Pale: _ColorSchema.ValueType  # 1
    Classic: _ColorSchema.ValueType  # 2
    ClassicPale: _ColorSchema.ValueType  # 3
    Night: _ColorSchema.ValueType  # 4

class ColorSchema(_ColorSchema, metaclass=_ColorSchemaEnumTypeWrapper): ...

Modern: ColorSchema.ValueType  # 0
Pale: ColorSchema.ValueType  # 1
Classic: ColorSchema.ValueType  # 2
ClassicPale: ColorSchema.ValueType  # 3
Night: ColorSchema.ValueType  # 4

class _AccessPolicy:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _AccessPolicyEnumTypeWrapper(_EnumTypeWrapper[_AccessPolicy.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    NotSpecified: _AccessPolicy.ValueType  # 0
    DemocraticBan: _AccessPolicy.ValueType  # 1
    FullBan: _AccessPolicy.ValueType  # 2
    ChatBan: _AccessPolicy.ValueType  # 3
    RestrictContentEditing: _AccessPolicy.ValueType  # 4

class AccessPolicy(_AccessPolicy, metaclass=_AccessPolicyEnumTypeWrapper): ...

NotSpecified: AccessPolicy.ValueType  # 0
DemocraticBan: AccessPolicy.ValueType  # 1
FullBan: AccessPolicy.ValueType  # 2
ChatBan: AccessPolicy.ValueType  # 3
RestrictContentEditing: AccessPolicy.ValueType  # 4

@typing_extensions.final
class LoginRequest(Message):
    DESCRIPTOR: Descriptor

    LOGIN_FIELD_NUMBER: int
    PASSWORD_FIELD_NUMBER: int
    REMEMBER_ME_FIELD_NUMBER: int
    login: str
    password: str
    remember_me: bool
    def __init__(
        self,
        *,
        login: str = ...,
        password: str = ...,
        remember_me: bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["login", b"login", "password", b"password", "remember_me", b"remember_me"]) -> None: ...

@typing_extensions.final
class LoginResponse(Message):
    DESCRIPTOR: Descriptor

    USER_FIELD_NUMBER: int
    TOKEN_FIELD_NUMBER: int
    @property
    def user(self) -> UserEnvelope: ...
    token: str
    def __init__(
        self,
        *,
        user: UserEnvelope | None = ...,
        token: str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["user", b"user"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["token", b"token", "user", b"user"]) -> None: ...

@typing_extensions.final
class LogoutRequest(Message):
    DESCRIPTOR: Descriptor

    TOKEN_FIELD_NUMBER: int
    token: str
    def __init__(
        self,
        *,
        token: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["token", b"token"]) -> None: ...

@typing_extensions.final
class LogoutAllRequest(Message):
    DESCRIPTOR: Descriptor

    TOKEN_FIELD_NUMBER: int
    token: str
    def __init__(
        self,
        *,
        token: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["token", b"token"]) -> None: ...

@typing_extensions.final
class GetCurrentAccountRequest(Message):
    DESCRIPTOR: Descriptor

    TOKEN_FIELD_NUMBER: int
    token: str
    def __init__(
        self,
        *,
        token: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["token", b"token"]) -> None: ...

@typing_extensions.final
class GetCurrentAccountResponse(Message):
    DESCRIPTOR: Descriptor

    USER_FIELD_NUMBER: int
    @property
    def user(self) -> UserDetailsEnvelope: ...
    def __init__(
        self,
        *,
        user: UserDetailsEnvelope | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["user", b"user"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["user", b"user"]) -> None: ...

@typing_extensions.final
class GetAccountsRequest(Message):
    DESCRIPTOR: Descriptor

    WITH_INACTIVE_FIELD_NUMBER: int
    PAGING_FIELD_NUMBER: int
    with_inactive: bool
    @property
    def paging(self) -> PagingQuery: ...
    def __init__(
        self,
        *,
        with_inactive: bool = ...,
        paging: PagingQuery | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["paging", b"paging"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["paging", b"paging", "with_inactive", b"with_inactive"]) -> None: ...

@typing_extensions.final
class GetAccountsResponse(Message):
    DESCRIPTOR: Descriptor

    ACCOUNTS_FIELD_NUMBER: int
    PAGING_FIELD_NUMBER: int
    @property
    def accounts(self) -> RepeatedCompositeFieldContainer[User]: ...
    @property
    def paging(self) -> PagingResult: ...
    def __init__(
        self,
        *,
        accounts: Iterable[User] | None = ...,
        paging: PagingResult | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["paging", b"paging"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["accounts", b"accounts", "paging", b"paging"]) -> None: ...

@typing_extensions.final
class RegisterAccountRequest(Message):
    DESCRIPTOR: Descriptor

    LOGIN_FIELD_NUMBER: int
    EMAIL_FIELD_NUMBER: int
    PASSWORD_FIELD_NUMBER: int
    login: str
    email: str
    password: str
    def __init__(
        self,
        *,
        login: str = ...,
        email: str = ...,
        password: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["email", b"email", "login", b"login", "password", b"password"]) -> None: ...

@typing_extensions.final
class RegisterAccountResponse(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    LOGIN_FIELD_NUMBER: int
    id: str
    login: str
    def __init__(
        self,
        *,
        id: str = ...,
        login: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["id", b"id", "login", b"login"]) -> None: ...

@typing_extensions.final
class RegisterAccountClientStreamResponse(Message):
    DESCRIPTOR: Descriptor

    @typing_extensions.final
    class Result(Message):
        DESCRIPTOR: Descriptor

        LOGIN_FIELD_NUMBER: int
        ID_FIELD_NUMBER: int
        ERROR_FIELD_NUMBER: int
        login: str
        id: str
        error: str
        def __init__(
            self,
            *,
            login: str = ...,
            id: str = ...,
            error: str = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["error", b"error", "id", b"id", "result", b"result"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["error", b"error", "id", b"id", "login", b"login", "result", b"result"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["result", b"result"]) -> typing_extensions.Literal["id", "error"] | None: ...

    RESULTS_FIELD_NUMBER: int
    @property
    def results(self) -> RepeatedCompositeFieldContainer[RegisterAccountClientStreamResponse.Result]: ...
    def __init__(
        self,
        *,
        results: Iterable[RegisterAccountClientStreamResponse.Result] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["results", b"results"]) -> None: ...

@typing_extensions.final
class ActivateAccountRequest(Message):
    DESCRIPTOR: Descriptor

    ACTIVATION_TOKEN_FIELD_NUMBER: int
    activation_token: str
    def __init__(
        self,
        *,
        activation_token: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["activation_token", b"activation_token"]) -> None: ...

@typing_extensions.final
class ActivateAccountResponse(Message):
    DESCRIPTOR: Descriptor

    USER_FIELD_NUMBER: int
    @property
    def user(self) -> UserEnvelope: ...
    def __init__(
        self,
        *,
        user: UserEnvelope | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["user", b"user"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["user", b"user"]) -> None: ...

@typing_extensions.final
class ChangeAccountEmailRequest(Message):
    DESCRIPTOR: Descriptor

    LOGIN_FIELD_NUMBER: int
    PASSWORD_FIELD_NUMBER: int
    EMAIL_FIELD_NUMBER: int
    login: str
    password: str
    email: str
    def __init__(
        self,
        *,
        login: str = ...,
        password: str = ...,
        email: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["email", b"email", "login", b"login", "password", b"password"]) -> None: ...

@typing_extensions.final
class ChangeAccountEmailResponse(Message):
    DESCRIPTOR: Descriptor

    USER_FIELD_NUMBER: int
    @property
    def user(self) -> UserEnvelope: ...
    def __init__(
        self,
        *,
        user: UserEnvelope | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["user", b"user"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["user", b"user"]) -> None: ...

@typing_extensions.final
class ResetAccountPasswordRequest(Message):
    DESCRIPTOR: Descriptor

    LOGIN_FIELD_NUMBER: int
    EMAIL_FIELD_NUMBER: int
    login: str
    email: str
    def __init__(
        self,
        *,
        login: str = ...,
        email: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["email", b"email", "login", b"login"]) -> None: ...

@typing_extensions.final
class ResetAccountPasswordResponse(Message):
    DESCRIPTOR: Descriptor

    USER_FIELD_NUMBER: int
    @property
    def user(self) -> UserEnvelope: ...
    def __init__(
        self,
        *,
        user: UserEnvelope | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["user", b"user"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["user", b"user"]) -> None: ...

@typing_extensions.final
class ChangeAccountPasswordRequest(Message):
    DESCRIPTOR: Descriptor

    LOGIN_FIELD_NUMBER: int
    TOKEN_FIELD_NUMBER: int
    OLD_PASSWORD_FIELD_NUMBER: int
    NEW_PASSWORD_FIELD_NUMBER: int
    login: str
    @property
    def token(self) -> StringValue: ...
    old_password: str
    new_password: str
    def __init__(
        self,
        *,
        login: str = ...,
        token: StringValue | None = ...,
        old_password: str = ...,
        new_password: str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["token", b"token"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["login", b"login", "new_password", b"new_password", "old_password", b"old_password", "token", b"token"]) -> None: ...

@typing_extensions.final
class ChangeAccountPasswordResponse(Message):
    DESCRIPTOR: Descriptor

    USER_FIELD_NUMBER: int
    @property
    def user(self) -> UserEnvelope: ...
    def __init__(
        self,
        *,
        user: UserEnvelope | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["user", b"user"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["user", b"user"]) -> None: ...

@typing_extensions.final
class UpdateAccountRequest(Message):
    DESCRIPTOR: Descriptor

    TOKEN_FIELD_NUMBER: int
    USER_DATA_FIELD_NUMBER: int
    token: str
    @property
    def user_data(self) -> UserUpdate: ...
    def __init__(
        self,
        *,
        token: str = ...,
        user_data: UserUpdate | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["user_data", b"user_data"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["token", b"token", "user_data", b"user_data"]) -> None: ...

@typing_extensions.final
class UpdateAccountResponse(Message):
    DESCRIPTOR: Descriptor

    USER_FIELD_NUMBER: int
    @property
    def user(self) -> UserDetailsEnvelope: ...
    def __init__(
        self,
        *,
        user: UserDetailsEnvelope | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["user", b"user"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["user", b"user"]) -> None: ...

@typing_extensions.final
class TimestampValue(Message):
    DESCRIPTOR: Descriptor

    VALUE_FIELD_NUMBER: int
    @property
    def value(self) -> Timestamp: ...
    def __init__(
        self,
        *,
        value: Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["value", b"value"]) -> None: ...

@typing_extensions.final
class UserRating(Message):
    DESCRIPTOR: Descriptor

    ENABLED_FIELD_NUMBER: int
    QUALITY_FIELD_NUMBER: int
    QUANTITY_FIELD_NUMBER: int
    enabled: bool
    quality: int
    quantity: int
    def __init__(
        self,
        *,
        enabled: bool = ...,
        quality: int = ...,
        quantity: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["enabled", b"enabled", "quality", b"quality", "quantity", b"quantity"]) -> None: ...

@typing_extensions.final
class User(Message):
    DESCRIPTOR: Descriptor

    LOGIN_FIELD_NUMBER: int
    ROLES_FIELD_NUMBER: int
    MEDIUM_PICTURE_URL_FIELD_NUMBER: int
    SMALL_PICTURE_URL_FIELD_NUMBER: int
    STATUS_FIELD_NUMBER: int
    RATING_FIELD_NUMBER: int
    ONLINE_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    LOCATION_FIELD_NUMBER: int
    REGISTRATION_FIELD_NUMBER: int
    login: str
    @property
    def roles(self) -> RepeatedScalarFieldContainer[UserRole.ValueType]: ...
    @property
    def medium_picture_url(self) -> StringValue: ...
    @property
    def small_picture_url(self) -> StringValue: ...
    @property
    def status(self) -> StringValue: ...
    @property
    def rating(self) -> UserRating: ...
    @property
    def online(self) -> TimestampValue: ...
    @property
    def name(self) -> StringValue: ...
    @property
    def location(self) -> StringValue: ...
    @property
    def registration(self) -> TimestampValue: ...
    def __init__(
        self,
        *,
        login: str = ...,
        roles: Iterable[UserRole.ValueType] | None = ...,
        medium_picture_url: StringValue | None = ...,
        small_picture_url: StringValue | None = ...,
        status: StringValue | None = ...,
        rating: UserRating | None = ...,
        online: TimestampValue | None = ...,
        name: StringValue | None = ...,
        location: StringValue | None = ...,
        registration: TimestampValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["location", b"location", "medium_picture_url", b"medium_picture_url", "name", b"name", "online", b"online", "rating", b"rating", "registration", b"registration", "small_picture_url", b"small_picture_url", "status", b"status"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["location", b"location", "login", b"login", "medium_picture_url", b"medium_picture_url", "name", b"name", "online", b"online", "rating", b"rating", "registration", b"registration", "roles", b"roles", "small_picture_url", b"small_picture_url", "status", b"status"]) -> None: ...

@typing_extensions.final
class UserDetails(Message):
    DESCRIPTOR: Descriptor

    LOGIN_FIELD_NUMBER: int
    ROLES_FIELD_NUMBER: int
    ORIGINAL_PICTURE_URL_FIELD_NUMBER: int
    MEDIUM_PICTURE_URL_FIELD_NUMBER: int
    SMALL_PICTURE_URL_FIELD_NUMBER: int
    STATUS_FIELD_NUMBER: int
    RATING_FIELD_NUMBER: int
    ONLINE_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    LOCATION_FIELD_NUMBER: int
    REGISTRATION_FIELD_NUMBER: int
    ICQ_FIELD_NUMBER: int
    SKYPE_FIELD_NUMBER: int
    INFO_FIELD_NUMBER: int
    login: str
    @property
    def roles(self) -> RepeatedScalarFieldContainer[UserRole.ValueType]: ...
    @property
    def original_picture_url(self) -> StringValue: ...
    @property
    def medium_picture_url(self) -> StringValue: ...
    @property
    def small_picture_url(self) -> StringValue: ...
    @property
    def status(self) -> StringValue: ...
    @property
    def rating(self) -> UserRating: ...
    @property
    def online(self) -> TimestampValue: ...
    @property
    def name(self) -> StringValue: ...
    @property
    def location(self) -> StringValue: ...
    @property
    def registration(self) -> TimestampValue: ...
    @property
    def icq(self) -> StringValue: ...
    @property
    def skype(self) -> StringValue: ...
    @property
    def info(self) -> StringValue: ...
    def __init__(
        self,
        *,
        login: str = ...,
        roles: Iterable[UserRole.ValueType] | None = ...,
        original_picture_url: StringValue | None = ...,
        medium_picture_url: StringValue | None = ...,
        small_picture_url: StringValue | None = ...,
        status: StringValue | None = ...,
        rating: UserRating | None = ...,
        online: TimestampValue | None = ...,
        name: StringValue | None = ...,
        location: StringValue | None = ...,
        registration: TimestampValue | None = ...,
        icq: StringValue | None = ...,
        skype: StringValue | None = ...,
        info: StringValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["icq", b"icq", "info", b"info", "location", b"location", "medium_picture_url", b"medium_picture_url", "name", b"name", "online", b"online", "original_picture_url", b"original_picture_url", "rating", b"rating", "registration", b"registration", "skype", b"skype", "small_picture_url", b"small_picture_url", "status", b"status"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["icq", b"icq", "info", b"info", "location", b"location", "login", b"login", "medium_picture_url", b"medium_picture_url", "name", b"name", "online", b"online", "original_picture_url", b"original_picture_url", "rating", b"rating", "registration", b"registration", "roles", b"roles", "skype", b"skype", "small_picture_url", b"small_picture_url", "status", b"status"]) -> None: ...

@typing_extensions.final
class UserUpdate(Message):
    DESCRIPTOR: Descriptor

    STATUS_FIELD_NUMBER: int
    RATING_DISABLED_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    LOCATION_FIELD_NUMBER: int
    ICQ_FIELD_NUMBER: int
    SKYPE_FIELD_NUMBER: int
    INFO_FIELD_NUMBER: int
    USER_SETTINGS_FIELD_NUMBER: int
    @property
    def status(self) -> StringValue: ...
    @property
    def rating_disabled(self) -> BoolValue: ...
    @property
    def name(self) -> StringValue: ...
    @property
    def location(self) -> StringValue: ...
    @property
    def icq(self) -> StringValue: ...
    @property
    def skype(self) -> StringValue: ...
    @property
    def info(self) -> StringValue: ...
    @property
    def user_settings(self) -> UserSettings: ...
    def __init__(
        self,
        *,
        status: StringValue | None = ...,
        rating_disabled: BoolValue | None = ...,
        name: StringValue | None = ...,
        location: StringValue | None = ...,
        icq: StringValue | None = ...,
        skype: StringValue | None = ...,
        info: StringValue | None = ...,
        user_settings: UserSettings | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["icq", b"icq", "info", b"info", "location", b"location", "name", b"name", "rating_disabled", b"rating_disabled", "skype", b"skype", "status", b"status", "user_settings", b"user_settings"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["icq", b"icq", "info", b"info", "location", b"location", "name", b"name", "rating_disabled", b"rating_disabled", "skype", b"skype", "status", b"status", "user_settings", b"user_settings"]) -> None: ...

@typing_extensions.final
class UserSettings(Message):
    DESCRIPTOR: Descriptor

    COLOR_SCHEMA_FIELD_NUMBER: int
    NANNY_GREETINGS_MESSAGE_FIELD_NUMBER: int
    PAGING_SETTINGS_FIELD_NUMBER: int
    color_schema: ColorSchema.ValueType
    nanny_greetings_message: str
    @property
    def paging_settings(self) -> PagingSettings: ...
    def __init__(
        self,
        *,
        color_schema: ColorSchema.ValueType = ...,
        nanny_greetings_message: str = ...,
        paging_settings: PagingSettings | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["paging_settings", b"paging_settings"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["color_schema", b"color_schema", "nanny_greetings_message", b"nanny_greetings_message", "paging_settings", b"paging_settings"]) -> None: ...

@typing_extensions.final
class PagingQuery(Message):
    DESCRIPTOR: Descriptor

    SIZE_FIELD_NUMBER: int
    NUMBER_FIELD_NUMBER: int
    SKIP_FIELD_NUMBER: int
    @property
    def size(self) -> Int32Value: ...
    @property
    def number(self) -> Int32Value: ...
    @property
    def skip(self) -> Int32Value: ...
    def __init__(
        self,
        *,
        size: Int32Value | None = ...,
        number: Int32Value | None = ...,
        skip: Int32Value | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["number", b"number", "size", b"size", "skip", b"skip"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["number", b"number", "size", b"size", "skip", b"skip"]) -> None: ...

@typing_extensions.final
class PagingResult(Message):
    DESCRIPTOR: Descriptor

    TOTAL_PAGES_COUNT_FIELD_NUMBER: int
    TOTAL_ENTITIES_COUNT_FIELD_NUMBER: int
    CURRENT_PAGE_FIELD_NUMBER: int
    PAGE_SIZE_FIELD_NUMBER: int
    ENTITY_NUMBER_FIELD_NUMBER: int
    total_pages_count: int
    total_entities_count: int
    current_page: int
    page_size: int
    entity_number: int
    def __init__(
        self,
        *,
        total_pages_count: int = ...,
        total_entities_count: int = ...,
        current_page: int = ...,
        page_size: int = ...,
        entity_number: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["current_page", b"current_page", "entity_number", b"entity_number", "page_size", b"page_size", "total_entities_count", b"total_entities_count", "total_pages_count", b"total_pages_count"]) -> None: ...

@typing_extensions.final
class PagingSettings(Message):
    DESCRIPTOR: Descriptor

    POSTS_PER_PAGE_FIELD_NUMBER: int
    COMMENTS_PER_PAGE_FIELD_NUMBER: int
    TOPICS_PER_PAGE_FIELD_NUMBER: int
    MESSAGES_PER_PAGE_FIELD_NUMBER: int
    ENTITIES_PER_PAGE_FIELD_NUMBER: int
    posts_per_page: int
    comments_per_page: int
    topics_per_page: int
    messages_per_page: int
    entities_per_page: int
    def __init__(
        self,
        *,
        posts_per_page: int = ...,
        comments_per_page: int = ...,
        topics_per_page: int = ...,
        messages_per_page: int = ...,
        entities_per_page: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["comments_per_page", b"comments_per_page", "entities_per_page", b"entities_per_page", "messages_per_page", b"messages_per_page", "posts_per_page", b"posts_per_page", "topics_per_page", b"topics_per_page"]) -> None: ...

@typing_extensions.final
class UserEnvelope(Message):
    DESCRIPTOR: Descriptor

    RESOURCE_FIELD_NUMBER: int
    METADATA_FIELD_NUMBER: int
    @property
    def resource(self) -> User: ...
    @property
    def metadata(self) -> StringValue: ...
    def __init__(
        self,
        *,
        resource: User | None = ...,
        metadata: StringValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["metadata", b"metadata", "resource", b"resource"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["metadata", b"metadata", "resource", b"resource"]) -> None: ...

@typing_extensions.final
class UserDetailsEnvelope(Message):
    DESCRIPTOR: Descriptor

    RESOURCE_FIELD_NUMBER: int
    METADATA_FIELD_NUMBER: int
    @property
    def resource(self) -> UserDetails: ...
    @property
    def metadata(self) -> StringValue: ...
    def __init__(
        self,
        *,
        resource: UserDetails | None = ...,
        metadata: StringValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["metadata", b"metadata", "resource", b"resource"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["metadata", b"metadata", "resource", b"resource"]) -> None: ...

@typing_extensions.final
class GetAccountsByLoginRequest(Message):
    DESCRIPTOR: Descriptor

    LOGIN_FIELD_NUMBER: int
    login: str
    def __init__(
        self,
        *,
        login: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["login", b"login"]) -> None: ...

@typing_extensions.final
class GetAccountsByLoginResponse(Message):
    DESCRIPTOR: Descriptor

    LOGIN_FIELD_NUMBER: int
    USER_FIELD_NUMBER: int
    ERROR_FIELD_NUMBER: int
    login: str
    @property
    def user(self) -> User: ...
    error: str
    def __init__(
        self,
        *,
        login: str = ...,
        user: User | None = ...,
        error: str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["error", b"error", "result", b"result", "user", b"user"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["error", b"error", "login", b"login", "result", b"result", "user", b"user"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["result", b"result"]) -> typing_extensions.Literal["user", "error"] | None: ...
